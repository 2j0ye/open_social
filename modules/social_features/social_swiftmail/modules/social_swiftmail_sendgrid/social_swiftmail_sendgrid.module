<?php

/**
 * @file
 * Module file for  Social Swiftmailer Sendgrid integration.
 */

use Drupal\Component\Render\PlainTextOutput;
use Drupal\social_swiftmail_sendgrid\Plugin\QueueWorker\MassUserMailQueueProcessor;

/**
 * Implements hook_tokens_alter().
 */
function social_swiftmail_sendgrid_tokens_alter(array &$replacements, array $context, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  // If the [social_user:recipient] is set, we can replace it by
  // a string {{social_user:recipient}}, this is the substitution tag used in
  // Sendgrid to ensure Sendgrid can do the salutation correctly.
  // We will send a list of all recipients in JSON format from our SendEmail
  // plugin.
  if ((isset($context['tokens']['recipient']) && empty($replacements[$context['tokens']['recipient']]) && !empty($context['data']['sendgrid']['substitutions'])) &&
    (array_key_exists('{{social_user:recipient}}', $context['data']['sendgrid']['substitutions']))) {
    $replacements['[social_user:recipient]'] = "{{social_user:recipient}}";
  }
}

/**
 * Implements hook_queue_info_alter().
 */
function social_swiftmail_sendgrid_queue_info_alter(&$queues) {
  // We override the user_email_queue class, by now providing our custom
  // MassUserMailQueueProcessor which doesn't processes items one by one
  // sending each individual emails.
  // It rather collects all users from a batch, and sends one mail
  // to Sendgrid using its substitution system to increase performance.
  if (!empty($queues['user_email_queue'])) {
    $queues['user_email_queue']['class'] = MassUserMailQueueProcessor::class;
  }
}

/**
 * Implements hook_emailfrequency_info_alter().
 */
function social_swiftmail_sendgrid_emailfrequency_info_alter(&$frequency) {
  // We override the immediately class, by now providing our custom
  // SendMassEmailsImmediately which doesn't processes items one by one
  // sending each individual emails.
  // It rather collects all users from a batch with the same language, grabs
  // the rendered message and sends it to Sendgrid using its substitution
  // system to increase performance.
  if (!empty($queues['immediately'])) {
    $queues['immediately']['class'] = SendMassEmailsImmediately::class;
  }
}

/**
 * Implements hook_mail().
 */
function social_swiftmail_sendgrid_mail($key, &$message, $params) {
  $token_service = \Drupal::token();
  // See protected function sendMassMail in our MassUserMailQueueProcessor.
  $context = $params['context'];
  $subject = PlainTextOutput::renderFromHtml($token_service->replace($context['subject'], $context));
  $body = $token_service->replace($context['message'], $context);

  $message['subject'] .= str_replace(["\r", "\n"], '', $subject);
  $message['body'][] = $body;
  // We can consider using text/html, the text should be formatted correctly
  // already.
  if ($key === 'action_send_mass_email' || $key === 'activity_send_email') {
    $message['headers']['Content-Type'] = 'text/html; charset=utf-8';
  }
  // Lets ensure we pass along context data to our substitutions, so it knows
  // what display name to render later in the process.
  if (!empty($context['sendgrid']['substitutions'])) {
    $message['sendgrid']['substitutions'] = $context['sendgrid']['substitutions'];
  }
  // Also ensure we can use the BCC related function, as we want to send
  // mass emails to users individually without showing the other emails.
  if (isset($context['sendgrid']['smtpapito']['bcc'])) {
    $message['sendgrid']['smtpapito']['bcc'] = TRUE;
  }
}

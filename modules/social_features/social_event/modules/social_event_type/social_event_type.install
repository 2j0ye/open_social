<?php

/**
 * @file
 * Install, update and uninstall functions for the social_event_type module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\FieldConfigInterface;
use Drupal\user\Entity\Role;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_event_type.
 */
function social_event_type_install() {
  // Fetch sitemananger role.
  $role = Role::load('sitemanager');
  // Set permission for site manager.
  if ($role instanceof Role) {
    // Set permission.
    $role->grantPermission('set social event type settings');
    $role->grantPermission('edit terms in event_types');
    $role->grantPermission('delete terms in event_types');
    $role->trustData()->save();
  }
}

/**
 * Implements hook_uninstall().
 *
 * Perform actions related to the de-installation of social_event_type.
 */
function social_event_type_uninstall() {
  // Fetch sitemananger role.
  $role = Role::load('sitemanager');
  // Set permission for site manager.
  if ($role instanceof Role) {
    // Set permission.
    $role->revokePermission('set social event type settings');
    $role->revokePermission('edit terms in event_types');
    $role->revokePermission('delete terms in event_types');
    $role->trustData()->save();
  }

  // Also remove the fields and the vocabulary.
  \Drupal::configFactory()->getEditable('field.field.node.event.field_event_type')->delete();
  \Drupal::configFactory()->getEditable('field.storage.node.field_event_type')->delete();
  \Drupal::configFactory()->getEditable('taxonomy.vocabulary.event_types')->delete();
  \Drupal::configFactory()->getEditable('social_event_type.settings')->delete();
}

/**
 * Update label for field_event_type field.
 */
function social_event_type_update_8901() {
  // Load the existing configuration.
  $config_name = 'field.field.node.event.field_event_type';
  $config = \Drupal::configFactory()->getEditable($config_name);
  $config_data = $config->getRawData();

  if (!empty($config_data['label'])) {
    // This to ensure any custom added values are not affected.
    if (strpos($config_data['label'], 'Event type') !== FALSE) {
      $config_data['label'] = 'Type';
    }

    $config->setData($config_data)->save();
    // Make sure we clear cached definitions for the fields.
    \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  }
}

/**
 * Create new field & field storage configuration for new event type icon field.
 */
function social_event_type_update_8902(&$sandbox) {
  $configs = [
    'field.storage.taxonomy_term.field_event_type_icon',
    'field.field.taxonomy_term.event_types.field_event_type_icon',
    'core.entity_form_display.taxonomy_term.event_types.default',
  ];

  $config_path = drupal_get_path('module', 'social_event_type') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');

  foreach ($configs as $config) {
    $config_storage->write($config, $source->read($config));
  }
}
